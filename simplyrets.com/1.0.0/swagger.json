{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "api.simplyrets.com",
  "basePath": "/",
  "info": {
    "description": "The SimplyRETS API is an exciting step towards making it easier for\ndevelopers and real estate agents to build something awesome with\nreal estate data!\n\nThe documentation below makes live requests to our API using the\ntrial data. To get set up with the API using live MLS data, you\nmust have RETS credentials from your MLS, which you can then use to\ncreate an app with SimplyRETS. For more information on that\nprocess, please see our [FAQ](https://simplyrets.com/faq), [Getting\nStarted](https://simplyrets.com/blog/getting-set-up.html) page, or\n[contact us](https://simplyrets.com/\\#home-contact).\n\nBelow you'll find the API endpoints, query parameters, response bodies,\nand other information about using the SimplyRETS API. You can run\nqueries by clicking the 'Try it Out' button at the bottom of each\nsection.\n\n### Authentication\nThe SimplyRETS API uses Basic Authentication. When you create an\napp, you'll get a set of API credentials to access your\nlistings. If you're trying out the test data, you can use\n`simplyrets:simplyrets` for connecting to the API.\n\n### Media Types\nThe SimplyRETS API uses the 'Accept' header to allow clients to\ncontrol media types (content versions). We maintain backwards\ncompatibility with API clients by allowing them to specify a\ncontent version. We highly recommend setting and explicity media\ntype when your application reaches production. Both the structure\nand content of our API response bodies is subject to change so we\ncan add new features while respecting the stability of applications\nwhich have already been developed.\n\nTo always use the latest SimplyRETS content version, simply use\n`application/json` in your application `Accept` header.\n\nIf you want to pin your clients media type to a specific version,\nyou can use the vendor-specific SimplyRETS media type, e.g.\n`application/vnd.simplyrets-v0.1+json\"`\n\nTo view all valid content-types for making an `OPTIONS`, make a\nrequest to the SimplyRETS api root\n\n`curl -XOPTIONS -u simplyrets:simplyrets https://api.simplyrets.com/`\n\nThe default media types used in our API responses may change in the\nfuture. If you're building an application and care about the\nstability of the API, be sure to request a specific media type in the\nAccept header as shown in the examples below.\n\nThe wordpress plugin automatically sets the `Accept` header for the\ncompatible SimplyRETS media types.\n\n### Pagination\nThere a few pieces of useful information about each request stored\nin the HTTP Headers:\n\n- `X-Total-Count` shows you the total amount of listings that match\n  your current query.\n- `Link` contains pre-built pagination links for accessing the next\n'page' of listings that match your query. Read more about that\n[here](https://simplyrets.com/blog/api-pagination.html).\n",
    "title": "SimplyRETS",
    "version": "1.0.0",
    "x-origin": {
      "format": "swagger",
      "url": "https://docs.simplyrets.com/api/resources.json",
      "version": "2.0"
    },
    "x-providerName": "simplyrets.com"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json",
    "application/vnd.simplyrets-v0.1+json"
  ],
  "securityDefinitions": {
    "basicAuth": {
      "description": "HTTP Basic Authentication. Works over `HTTPS` only",
      "type": "basic"
    }
  },
  "paths": {
    "/openhouses": {
      "get": {
        "description": "This is the main endpoint for accessing openhouses.\n",
        "parameters": [
          {
            "description": "Request listings by a specific property type. This\ndefaults to Residential, and you can only specify one type\nin a single query.\n",
            "enum": [
              "Residential",
              "Rental",
              "Multifamily",
              "Condominium",
              "Commercial",
              "Land"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter the listings returned by brokerage with a Broker ID.\nYou can specific multiple broker parameters. Note, the Broker\nID is provided by your MLS.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "brokers",
            "required": false,
            "type": "array"
          },
          {
            "description": "Filter the listings returned by an agent ID.  Note, the\nAgent ID is provided by your MLS.\n",
            "in": "query",
            "name": "agent",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter listings by a minimum price.\n",
            "in": "query",
            "name": "minprice",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Scheduled date and time of the open house showing",
            "format": "date-time",
            "in": "query",
            "name": "startdate",
            "type": "string"
          },
          {
            "description": "Used as a cursor for pagination. Increase the offset parameter\nby the limit to go to the next \"page\" of listings. Also take\na look at the Link HTTP Header for pre-built pagination.\n",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Set the number of listings to return in the response.\nThis defaults to 20 listings, and can be a maximum of 50.\nTo paginate through to the next page of listings, take a\nlook at the `offset` parameter, or the Link in the HTTP\nHeader.\n",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort the response by a specific field. Values starting\nwith a minus (-) denote descending order, while the others\nare ascending.\n",
            "enum": [
              "listprice",
              "-listprice",
              "listdate",
              "-listdate",
              "beds",
              "-beds",
              "baths",
              "-baths"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Will send `Authenticated` if authentication is succesful,\notherwise it will send `Unauthorized`.\n",
            "schema": {
              "items": {
                "$ref": "#/definitions/OpenHouse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Will send `Bad Request`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Will send `Authentication Required`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Will send `Authorization Required`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "426": {
            "description": "Will send `Too Many Requests`. Please see our Service\nLevel Agreement for more information on Request Rates and\nAcceptable Use.\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Will send `Internal Server Error`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "summary": "The SimplyRETS OpenHouses API"
      }
    },
    "/openhouses/{openHouseKey}": {
      "get": {
        "description": "Use this endpoint for accessing a single OpenHouse.\n",
        "parameters": [
          {
            "default": 24625637,
            "description": "A unique OpenHouse identification key",
            "in": "path",
            "name": "openHouseKey",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Will send `Authenticated` if authentication is succesful,\notherwise it will send `Unauthorized`\n",
            "schema": {
              "$ref": "#/definitions/OpenHouse"
            }
          },
          "400": {
            "description": "Will send `Bad Request`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Will send `Authentication Required`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Will send `Authorization Required`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "426": {
            "description": "Will send `Too Many Requests`. Please see our Service\nLevel Agreement for more information on Request Rates and\nAcceptable Use.\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Will send `Internal Server Error`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "summary": "Single OpenHouse Endpoint"
      }
    },
    "/properties": {
      "get": {
        "description": "This is the main endpoint for accessing your properties. View\nall of the available query parameters and make requests below!\nThe API uses Basic Authentication, which most HTTP libraries\nwill handle for you. To use the test data (which is what this\npages uses), you can use the api key `simplyrets` and secret\n`simplyrets`. Note that these test listings are not live MLS\nlistings but the data, query parameters, and response bodies\nwill all work the same.\n",
        "parameters": [
          {
            "description": "A textual keyword search. This parameter will search  the following\nfields, when available:\n  - mls number / listing id\n  - street number\n  - street name\n  - mls area (major)\n  - city\n  - subdivision name\n  - postal code\n",
            "in": "query",
            "name": "q",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter listings by a minimum price.\n",
            "in": "query",
            "name": "minprice",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter listings by a maximum price\n",
            "in": "query",
            "name": "maxprice",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter the listings returned by an agent ID.  Note, the\nAgent ID is provided by your MLS.\n",
            "in": "query",
            "name": "agent",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter listings by a minimum area size in Sq Ft.\n",
            "in": "query",
            "name": "minarea",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter listings by a maximum area size in Sq Ft.\n",
            "in": "query",
            "name": "maxarea",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter listings by a minimum number of bathrooms.\n",
            "in": "query",
            "name": "minbaths",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter listings by a maximum number of bathrooms.\n",
            "in": "query",
            "name": "maxbaths",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter listings by a minimum number of bedrooms.\n",
            "in": "query",
            "name": "minbeds",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter listings by a maximum number of bedrooms.\n",
            "in": "query",
            "name": "maxbeds",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter listings by a maximum number of days on market.\n_Note that your MLS must provide Days on Market data._\n",
            "in": "query",
            "name": "maxdom",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Filter listings by a setting a minimum year built.\n",
            "in": "query",
            "name": "minyear",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Set the number of listings to return in the response.\nThis defaults to 20 listings, and can be a maximum of 50.\nTo paginate through to the next page of listings, take a\nlook at the `offset` parameter, or the Link in the HTTP\nHeader.\n",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Used as a cursor for pagination. Increase the offset parameter\nby the limit to go to the next \"page\" of listings. Also take\na look at the Link HTTP Header for pre-built pagination.\n",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Used to specify the vendor (MLS) to search from. This\nparameter is required on multi-MLS apps, and you can only\nquery one vendor at a time. To get your vendor id's make\nan OPTIONS request to https://api.simplyrets.com.\n",
            "in": "query",
            "name": "vendor",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter the listings returned by brokerage with a Broker ID.\nYou can specific multiple broker parameters. Note, the Broker\nID is provided by your MLS.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "brokers",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter the listings returned by postal codes / zip\ncode. You can specify multiple.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "postalCodes",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter the listings returned by specific features.  You\ncan specify multiple.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "features",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter the listings returned by specific amenities.  You\ncan specify multiple amenities.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "amenities",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter the listings returned by specific neighborhoods and\nsubdivisions. You can specify multiple.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "neighborhoods",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter the listings returned by specific cities. You can\nspecify multiple.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "cities",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Filter the listings returned by specific counties. You can\nspecify multiple.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "counties",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Return listings that are within a set of latitude\nlongitude coordinates. For example;\n```\n29.723837,-95.69778\n29.938275,-95.69778\n29.938275,-95.32974\n29.723837,-95.32974\n```\nNote that some MLS's do not provide latitude and longitude\nfor their listings, which is required for this parameter\nto work. In these cases, SimplyRETS offers a [Geocoding\nAddon](https://simplyrets.com/services#geocoding).\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "points",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Include a extra fields which are not in the default\nresponse body\n- 'association' includes additional HOA data\n- 'agreement' information on the listing agreement\n- 'garageSpaces' additional garage data\n- 'maintenanceExpense' data on maintenance expenses\n- 'parking' additional parking data\n- 'pool' includes an additional pool description\n- 'rooms' include parameter will include\n   any additional rooms as a list.\n\nNote that your MLS must provide these fields in their RETS\ndata for them to be available in the API response.\n",
            "enum": [
              "association",
              "agreement",
              "garageSpaces",
              "maintenanceExpense",
              "parking",
              "pool",
              "rooms"
            ],
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "include",
            "required": false,
            "type": "array"
          },
          {
            "description": "\nRequest listings by a specific status. This parameter\ndefaults to active and you can specify multiple statuses\nin a single query.\n\nListing statuses depend on your MLS's availability. Below is\na brief description of each status with possible synonyms which\nmay map to your MLS-specific statuses\n- Active: Active Listing which is still on the market\n- ActiveUnderContract: An offer has been accepted but the listing is still on market. Synonyms: Accepting Backup Offers, Backup Offer, Active With Accepted. Synonyms: Offer, Backup, Contingent\n- Pending: An offer has been accepted and the listing is no longer on market. Synonyms: Offer Accepted, Under Contract\n- Hold: The listing has been withdrawn from the market, but a contract\n  still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market\n- Withdrawn: The listing has been withdrawn from the market, but a contract\n  still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market\n- Closed: The purchase agreement has been fulfilled or the lease\n  agreement has been executed. Synonyms: Sold, Leased, Rented, Closed Sale\n- Expired: The listing contract has expired\n- Delete: The listing contract was never valid or other reason for the contract to be nullified. Synonyms: Kill, Zap\n- Incomplete: The listing has not yet be completely entered and is not yet\n  published in the MLS. Synonyms: Draft, Partially Complted\n- ComingSoon\n",
            "enum": [
              "Active",
              "Pending",
              "Closed",
              "ActiveUnderContract",
              "Hold",
              "Withdrawn",
              "Expired",
              "Delete",
              "Incomplete",
              "ComingSoon"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "description": "Request listings by a specific property type. This\ndefaults to Residential, and you can only specify one type\nin a single query.\n",
            "enum": [
              "Residential",
              "Rental",
              "Multifamily",
              "Condominium",
              "Commercial",
              "Land"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Sort the response by a specific field. Values starting\nwith a minus (-) denote descending order, while the others\nare ascending.\n",
            "enum": [
              "listprice",
              "-listprice",
              "listdate",
              "-listdate",
              "beds",
              "-beds",
              "baths",
              "-baths"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Will send `Authenticated` if authentication is succesful,\notherwise it will send `Unauthorized`.\n",
            "schema": {
              "items": {
                "$ref": "#/definitions/Listing"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Will send `Bad Request`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Will send `Authentication Required`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Will send `Authorization Required`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "426": {
            "description": "Will send `Too Many Requests`. Please see our Service\nLevel Agreement for more information on Request Rates and\nAcceptable Use.\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Will send `Internal Server Error`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "summary": "The SimplyRETS Listings API"
      }
    },
    "/properties/{mlsId}": {
      "get": {
        "description": "Use this endpoint for accessing a single listing. When you\nmake a search to the `/properties` endpoint, each listing in\nthe response will contain a unique `mlsId` field which should\nbe used to request that listing on this route.\n",
        "parameters": [
          {
            "default": 1005252,
            "description": "A mlsId (unique indentifier).",
            "in": "path",
            "name": "mlsId",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "description": "Include a extra fields which are not in the default\nresponse body\n- 'association' includes additional HOA data\n- 'agreement' information on the listing agreement\n- 'garageSpaces' additional garage data\n- 'maintenanceExpense' data on maintenance expenses\n- 'parking' additional parking data\n- 'pool' includes an additional pool description\n- 'rooms' include parameter will include\n   any additional rooms as a list.\n\nNote that your MLS must provide these fields in their RETS\ndata for them to be available with valid data in the API\nresponse. If your MLS does not offer these fields, they will\ncontain 'null'.\n",
            "enum": [
              "association",
              "agreement",
              "garageSpaces",
              "maintenanceExpense",
              "parking",
              "pool",
              "rooms"
            ],
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "include",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Will send `Authenticated` if authentication is succesful,\notherwise it will send `Unauthorized`\n",
            "schema": {
              "$ref": "#/definitions/Listing"
            }
          },
          "400": {
            "description": "Will send `Bad Request`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Will send `Authentication Required`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Will send `Authorization Required`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "426": {
            "description": "Will send `Too Many Requests`. Please see our Service\nLevel Agreement for more information on Request Rates and\nAcceptable Use.\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Will send `Internal Server Error`.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "summary": "Single Listing Endpoint"
      }
    }
  },
  "definitions": {
    "Agent": {
      "description": "SimplyRETS Agent Api",
      "properties": {
        "contact": {
          "$ref": "#/definitions/ContactInformation",
          "description": "Agent contact info. This information is only present when\nyour RETS feed specifies the agent wishes to show their\ncontact information publicly.\n"
        },
        "firstName": {
          "description": "Agent first name",
          "type": "string"
        },
        "id": {
          "description": "Well known Agent MLS number or id.",
          "type": "string"
        },
        "lastName": {
          "description": "Agent last name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Broker": {
      "description": "SimplyRETS Broker Api",
      "properties": {
        "startdate": {
          "description": "Start Date",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContactInformation": {
      "description": "RETS MLS Contact Information",
      "properties": {
        "cell": {
          "description": "Contact Information Cell Phone",
          "type": "string"
        },
        "full": {
          "description": "Full pretty-printed address with suffix (if available)",
          "type": "string"
        },
        "office": {
          "description": "Contact Information Office Phone Number",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Error": {
      "description": "Error information",
      "properties": {
        "error": {
          "description": "Error code. In general, we try to adhere to HTTP status code\nand use these error statuses for detailed reporting.\n",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "Status message with an explanation of the error",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GeographicData": {
      "description": "RETS MLS Geographic Data",
      "properties": {
        "county": {
          "description": "Listing county",
          "type": "string"
        },
        "directions": {
          "description": "Directions to the property",
          "type": "string"
        },
        "lat": {
          "description": "Listing latitude (if available)",
          "format": "double",
          "type": "number"
        },
        "lng": {
          "description": "Listing longitude (if available)",
          "format": "double",
          "type": "number"
        },
        "marketArea": {
          "description": "Listing GeoMarket area. May be the same as mlsArea",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Listing": {
      "description": "RETS MLS Listing Property",
      "properties": {
        "address": {
          "$ref": "#/definitions/StreetAddress",
          "description": "Comprehensive property address information"
        },
        "agent": {
          "$ref": "#/definitions/Agent",
          "description": "Comprehensive listing agent information"
        },
        "disclaimer": {
          "description": "Data accuracy disclaimer. The value in the disclaimer may\nchange depending on your MLS vendors rules.\n",
          "type": "string"
        },
        "geo": {
          "$ref": "#/definitions/GeographicData",
          "description": "Geographic data for the listing"
        },
        "leaseTerm": {
          "description": "Represents the length of the lease.",
          "type": "string"
        },
        "leaseType": {
          "description": "Information about the status of the existing lease on the property.",
          "type": "string"
        },
        "listDate": {
          "description": "Date and time the listing became Active",
          "format": "date-time",
          "type": "string"
        },
        "listPrice": {
          "description": "Price of the listing",
          "format": "double",
          "type": "number"
        },
        "listingId": {
          "description": "Data Dictionary v1.3 ListingId. The well known identifier\nfor the listing. The value is the id or number by the MLS as\na public identifier for the listing.\n\nThis identifier should not be confused with the 'mlsId', which is\nspecific to the SimplyRETS API.\n",
          "type": "string"
        },
        "mls": {
          "$ref": "#/definitions/MlsInformation",
          "description": "MLS vendor information and data"
        },
        "mlsId": {
          "default": 329479823,
          "description": "A unique identifier for this listing specific to the\nSimplyRETS API. Thie identifier is specific to the\nSimplyRETS api and has no correlation with the MLS\nnumber. Use this id when making requests to the single\nlisting endpoint (eg, `/properties/{mlsId}`).\n\nApplications should not rely on specific 'mlsId's being\npresent. Instead, apps should dynamically use the 'mlsId'\nafter using other more general query parameters. Many mls\nvendors require listings which are expired, terminated or\nsold to be purged, which will render calls to specific\nmlsId's to return nothing (or possibly a 404).\n",
          "format": "int64",
          "type": "integer"
        },
        "modified": {
          "description": "Date and time of the last modification",
          "format": "date-time",
          "type": "string"
        },
        "office": {
          "$ref": "#/definitions/Office",
          "description": "Listing office or brokerage."
        },
        "photos": {
          "description": "Photos of the property. Images are served over https and are\nsuitable for production use on secure websites\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "privateRemarks": {
          "description": "Agent only remarks",
          "type": "string"
        },
        "property": {
          "$ref": "#/definitions/Property",
          "description": "Specific property data associated with listing."
        },
        "remarks": {
          "description": "Description or remarks",
          "type": "string"
        },
        "sales": {
          "$ref": "#/definitions/Sales",
          "description": "Sales data"
        },
        "school": {
          "$ref": "#/definitions/School",
          "description": "Comprehensive school zone data"
        },
        "showingInstructions": {
          "description": "Public instructions for showing the property.",
          "type": "string"
        },
        "tax": {
          "$ref": "#/definitions/Tax",
          "description": "Associate tax data"
        }
      },
      "type": "object"
    },
    "MlsInformation": {
      "description": "RETS MLS Vendor Data",
      "properties": {
        "area": {
          "description": "MLS Area. Generally a subdivision or community name.",
          "type": "string"
        },
        "daysOnMarket": {
          "description": "Amount of days the property has been Active",
          "format": "int64",
          "type": "integer"
        },
        "servingName": {
          "description": "Alias for the listing office or brokerage",
          "type": "string"
        },
        "status": {
          "description": "MLS Status Code. Compliant with data dictionary v1.3 ListingStatus\nListing statuses depend on your MLS's availability. Below is\na brief description of each status with possible synonyms which\nmay map to your MLS-specific statuses\n- Active: Active Listing which is still on the market\n- ActiveUnderContract: An offer has been accepted but the listing is still on market. Synonyms: Accepting Backup Offers, Backup Offer, Active With Accepted. Synonyms: Offer, Backup, Contingent\n- Pending: An offer has been accepted and the listing is no longer on market. Synonyms: Offer Accepted, Under Contract\n- Hold: The listing has been withdrawn from the market, but a contract\n  still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market\n- Withdrawn: The listing has been withdrawn from the market, but a contract\n  still exists between the seller and the listing member. Synonyms: Hold, Hold Do Not Show, Temp Off Market\n- Closed: The purchase agreement has been fulfilled or the lease\n  agreement has been executed. Synonyms: Sold, Leased, Rented, Closed Sale\n- Expired: The listing contract has expired\n- Delete: The listing contract was never valid or other reason for the contract to be nullified. Synonyms: Kill, Zap\n- Incomplete: The listing has not yet be completely entered and is not yet\n  published in the MLS. Synonyms: Draft, Partially Complted\n- ComingSoon\n",
          "enum": [
            "Active",
            "ActiveUnderContract (Backup-Offer)",
            "Pending",
            "Hold",
            "Withdrawn",
            "Closed",
            "Expired",
            "Delete",
            "Incomplete",
            "ComingSoon"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Office": {
      "description": "RETS MLS Office",
      "properties": {
        "brokerid": {
          "description": "Office or brokerage MLS identifier",
          "type": "string"
        },
        "contact": {
          "$ref": "#/definitions/ContactInformation",
          "description": "Associated contact details for the office. The availability of this\ninformation depends on your MLS rules and regulations\n"
        },
        "name": {
          "description": "Pimary office name",
          "type": "string"
        },
        "servingName": {
          "description": "Primary office or brokerage name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "OpenHouse": {
      "description": "SimplyRETS Open House object",
      "properties": {
        "description": {
          "description": "The remarks and/or description details for the open house",
          "type": "string"
        },
        "endTime": {
          "description": "The ending date time for the open house",
          "format": "date-time",
          "type": "string"
        },
        "inputId": {
          "description": "The MLS number for the showing agent or agent which created the OpenHouse\nin the MLS database.\n"
        },
        "listing": {
          "$ref": "#/definitions/Listing",
          "description": "The full listing associated with the OpenHouse"
        },
        "openHouseId": {
          "description": "The MLS number or id provided by the MLS\n",
          "type": "string"
        },
        "openHouseKey": {
          "description": "A unique identifier for the open house which is specific to the\nSimplyRETS API\n",
          "type": "string"
        },
        "refreshments": {
          "description": "Provided",
          "type": "string"
        },
        "startTime": {
          "description": "Start Date for the open house",
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "description": "The open house type. For example, Public or Private",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Parking": {
      "description": "RETS MLS School Data",
      "properties": {
        "description": {
          "description": "Parking features description",
          "type": "string"
        },
        "leased": {
          "type": "string"
        },
        "spaces": {
          "description": "Number of parking spaces",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Property": {
      "description": "Rets MLS Listing Property",
      "properties": {
        "accessibility": {
          "type": "string"
        },
        "additionalRooms": {
          "description": "Additional room information",
          "type": "string"
        },
        "area": {
          "default": 5984,
          "description": "Square footage of the building associated with a listing",
          "format": "int64",
          "type": "integer"
        },
        "areaSource": {
          "default": "Tax Record",
          "type": "string"
        },
        "bathsFull": {
          "description": "Number of full bathrooms",
          "format": "int64",
          "type": "integer"
        },
        "bathsHalf": {
          "description": "Number of half bathrooms",
          "format": "int64",
          "type": "integer"
        },
        "bedrooms": {
          "default": 5,
          "description": "Number of bedrooms",
          "format": "int64",
          "type": "integer"
        },
        "constructionMaterials": {
          "type": "string"
        },
        "exteriorFeatures": {
          "default": "1-2 Step Entry,Barn(s),Fenced Yard,Front Porch,Garden\nArea,Guest House,Out-Buildings,Patio,Prof Landscaping\n",
          "description": "",
          "type": "string"
        },
        "fireplaces": {
          "default": 1,
          "description": "Number of fireplaces",
          "format": "int64",
          "type": "integer"
        },
        "foundation": {
          "type": "string"
        },
        "garageSpaces": {
          "description": "Number of garage spaces",
          "format": "float",
          "type": "number"
        },
        "heating": {
          "default": "Central System, Forced Air, Gas",
          "description": "Heating description or short string",
          "type": "string"
        },
        "interiorFeatures": {
          "default": "2-Story Foyer,9 ft + Ceil Main,Cathedral Ceiling,Double Vnty\nOther,High Speed Internet Available,Entrance Foyer,Hardwood\nFloors,Trey Ceilings,Walk-In Closet(s),Wall/Wall Carpet\n",
          "description": "The properties interior features",
          "type": "string"
        },
        "laundryFeatures": {
          "type": "string"
        },
        "lotDescription": {
          "type": "string"
        },
        "lotSize": {
          "default": "3/4 Up To 1 Acre",
          "description": "Square footage of the entire property lot",
          "type": "string"
        },
        "maintenanceExpense": {
          "description": "Yearly maintenance expense",
          "format": "float",
          "type": "number"
        },
        "occupantName": {
          "type": "string"
        },
        "occupantType": {
          "type": "string"
        },
        "parking": {
          "$ref": "#/definitions/School"
        },
        "poolFeatures": {
          "type": "string"
        },
        "roof": {
          "default": "Composition",
          "description": "Property roof description",
          "type": "string"
        },
        "stories": {
          "default": 2,
          "description": "Number of stories or levels. Represented as a `double' to\naccount for half stories.\n",
          "format": "float",
          "type": "number"
        },
        "style": {
          "default": "Ranch, Traditional",
          "description": "Property style description or short string",
          "type": "string"
        },
        "subdivision": {
          "default": "River Oaks",
          "description": "The subdivision or community name",
          "type": "string"
        },
        "type": {
          "default": "RES",
          "description": "Abbreviated property type. RES is Residential, CND is CondoOrTownhome,\nRNT is Rental, MLF is Multi-Family, CRE is Commercial, LND is Land,\nFRM is Farm. See the 'propertySubType' field for more information.\n",
          "enum": [
            "RES",
            "CND",
            "RNT",
            "MLF",
            "CRE",
            "LND",
            "FRM"
          ],
          "type": "string"
        },
        "view": {
          "description": "View details and description",
          "type": "string"
        },
        "water": {
          "description": "Water description and details",
          "type": "string"
        },
        "yearBuilt": {
          "default": 2007,
          "description": "Year the property was built",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Sales": {
      "description": "Sales Data",
      "properties": {
        "agent": {
          "description": "RETS Sales data agent id",
          "type": "string"
        },
        "closeDate": {
          "description": "RETS Sales data close date",
          "format": "date-time",
          "type": "string"
        },
        "closePrice": {
          "description": "RETS Sales data sold price",
          "format": "int64",
          "type": "integer"
        },
        "contractDate": {
          "description": "RETS Sales data contract date",
          "format": "date-time",
          "type": "string"
        },
        "office": {
          "description": "RETS Sales data selling office/brokerage id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "School": {
      "description": "RETS MLS School Data",
      "properties": {
        "district": {
          "default": "School District",
          "description": "School district name.",
          "type": "string"
        },
        "elementarySchool": {
          "default": "Elementary School",
          "description": "Elementary school name.",
          "type": "string"
        },
        "highSchool": {
          "default": "High School",
          "description": "High school name",
          "type": "string"
        },
        "middleSchool": {
          "default": "Middle School",
          "description": "Middle or junior school name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StreetAddress": {
      "description": "RETS MLS Street Address",
      "properties": {
        "city": {
          "default": "Houston",
          "description": "City name",
          "type": "string"
        },
        "country": {
          "default": "United States",
          "description": "Street address country (United States or Canada)",
          "type": "string"
        },
        "crossStreet": {
          "default": "456 Cross Rd",
          "description": "Known cross street",
          "type": "string"
        },
        "full": {
          "default": "1234 SimplyRETS Drive",
          "description": "Full pretty-printed address with suffix (if available)",
          "type": "string"
        },
        "postalCode": {
          "description": "Street Address postal code",
          "type": "string"
        },
        "streetName": {
          "default": "SimplyRETS Drive",
          "description": "Name of the street",
          "type": "string"
        },
        "streetNumber": {
          "default": 1234,
          "description": "Street number",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Tax": {
      "description": "RETS MLS Tax Data",
      "properties": {
        "annualAmount": {
          "description": "Annual tax amount in USD",
          "type": "string"
        },
        "id": {
          "description": "Tax Parcel ID for the listing",
          "type": "string"
        },
        "year": {
          "description": "Tax Year",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    }
  }
}
